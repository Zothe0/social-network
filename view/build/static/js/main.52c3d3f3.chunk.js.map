{"version":3,"sources":["constants.js","components/AuthHeader.js","components/Footer.js","redux/authenticationLogic/authTypes.js","redux/authenticationLogic/authActionCreators.js","pages/AuthorizationPage.js","redux/postsLogic/postsTypes.js","redux/postsLogic/postsActionCreators.js","hooks/useCheckToken.js","hooks/useIbg.js","components/Post.js","components/PostList.js","components/Header.js","pages/PostsPage.js","redux/profileLogic/profileTypes.js","pages/RegistrationPage.js","redux/profileLogic/profileActionCreators.js","pages/ProfilePage.js","pages/SettingsPage.js","Routes.js","App.js","redux/authenticationLogic/authReducer.js","redux/postsLogic/postsReducer.js","redux/profileLogic/profileReducer.js","redux/appLogic/appReducer.js","redux/rootReducer.js","serviceWorker.js","redux/Api.js","redux/sagas/authWorker.js","redux/sagas/postsWorker.js","redux/sagas/profileWorker.js","redux/sagas/sagaWatcher.js","index.js"],"names":["PUBLIC_URL","AuthHeader","className","to","src","alt","Footer","changeInput","name","value","type","clearInput","setMessage","message","dispatch","a","setTimeout","clearMessage","setOnWarning","setOffWarning","authentication","token","nickName","getState","localStorage","getItem","setItem","JSON","stringify","authReducer","logout","removeItem","AuthorizationPage","useDispatch","auth","useSelector","state","useRef","password","submit","clearForm","submitForm","e","preventDefault","body","formInputs","inputHandler","target","checkInputs","useCallback","useEffect","current","classList","add","remove","data","parse","responseMessage","setAttribute","ref","onChange","autoComplete","placeholder","onClick","disabled","submitButton","updatePostList","payload","useCheckToken","logoutApp","verify","error","ibg","document","querySelectorAll","i","length","querySelector","style","backgroundImage","getAttribute","Post","post","currentTime","currentSec","Math","floor","currentDay","Date","getDate","currentMonth","getMonth","currentYear","getFullYear","postSec","date","postMin","getMinutes","postHour","getHours","postDay","postMonth","postYear","useState","warn","setWarn","checkTokenExpire","linkToAuthorProfile","author","likes","setLikes","includes","liked","setLiked","renderCount","setRenderCount","likeHolder","filter","item","tempLikes","push","rawHolder","postId","_id","newLikes","avatarUrl","timeDiffSec","formatedMin","dateFormating","text","views","PostList","uploadedPosts","map","now","key","Header","linkToProfile","addMenu","menu","window","addEventListener","parentNode","id","toggle","href","PostsPage","posts","postsReducer","bottomBreakPoint","textarea","previousYOffset","pageYOffset","publish","postField","uploadPosts","undefined","offsetTop","onSubmit","rows","maxLength","onKeyDown","keyCode","onFocus","loading","RegistrationPage","warnings","htmlFor","email","setCurrentProfileAvatarUrl","newAvatarUrl","ProfilePage","profile","profileReducer","useParams","file","fileText","dropArea","labelClass","setLabelClass","getAvatarUrl","dropFileHandler","stopPropagation","hideDropArea","files","dataTransfer","innerText","formHandler","form","FormData","append","currentProfileAvatarUrl","showDropArea","onDragLeave","encType","action","method","accept","onDrop","SettingsPage","Routes","authorized","path","App","initialState","fileInputRef","rootReducer","combineReducers","userId","appReducer","Boolean","location","hostname","match","request","url","headers","fetch","response","json","registration","login","call","ok","select","put","fault","param","incorrectField","publishPost","likeChanging","checkNewPosts","loadedPostsQuantity","update","console","log","currentLatestPostId","latestPostId","sendAvatarImage","uploadCurrentProfileAvatarUrl","fileInput","Saga","takeLeading","saga","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","thunk","run","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","unregister","catch"],"mappings":"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","file":"static/js/main.52c3d3f3.chunk.js","sourcesContent":["export const JWT_SECRET = 'b4KFHX6b3'\r\nexport const PUBLIC_URL = '/model/static/images/pages'\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { PUBLIC_URL } from '../constants'\r\n\r\nexport default function AuthHeader() {\r\n    return (\r\n        <>\r\n            <div className='header'>\r\n                <div className='header__container container'>\r\n                    <Link to='/' className='header__mini-logo'>\r\n                        <img\r\n                            src={PUBLIC_URL + '/minilogo.svg'}\r\n                            alt='минилого'\r\n                        />\r\n                    </Link>\r\n                    <Link to='/' className='header__logo'>\r\n                        <img src={PUBLIC_URL + '/logo.svg'} alt='лого' />\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Footer() {\r\n    return (\r\n        <>\r\n            <div className='auth-footer'>\r\n                <div className='auth-footer__container container'>\r\n                    <Link to='/' className='auth-footer__link'>\r\n                        memegram 2020\r\n                    </Link>\r\n                    <Link to='/' className='auth-footer__link'>\r\n                        О нас\r\n                    </Link>\r\n                    <Link to='/' className='auth-footer__link'>\r\n                        Вакансии\r\n                    </Link>\r\n                    <Link to='/' className='auth-footer__link'>\r\n                        Правила\r\n                    </Link>\r\n                    <Link to='/' className='auth-footer__link'>\r\n                        Конфиденциальность\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","// For registrationReducer\r\nexport const CHANGE_INPUT = 'CHANGE_INPUT'\r\nexport const CLEAR_INPUT = 'CLEAR_INPUT'\r\nexport const CLEAR_ALL_INPUTS = 'CLEAR_ALL_INPUTS'\r\nexport const CLEAR_PASSWORD_INPUT = 'CLEAR_PASSWORD_INPUT'\r\nexport const SET_ON_WARNING = 'SET_ON_WARNING'\r\nexport const SET_OFF_WARNING = 'SET_OFF_WARNING'\r\nexport const SET_SUBMIT_ENABLED = 'SET_SUBMIT_ENABLED'\r\nexport const SET_SUBMIT_DISABLED = 'SET_SUBMIT_DISABLED'\r\nexport const SET_MESSAGE = 'SET_MESSAGE'\r\nexport const CLEAR_MESSAGE = 'CLEAR_MESSAGE'\r\nexport const REGISTRATION = 'REGISTRATION'\r\nexport const LOGIN = 'LOGIN'\r\nexport const LOGIN_USER = 'LOGIN_USER'\r\nexport const LOGOUT_USER = 'LOGOUT_USER'\r\nexport const IS_AUTH_TRUE = 'IS_AUTH_TRUE'\r\nexport const IS_AUTH_FALSE = 'IS_AUTH_FALSE'\r\nexport const SET_AVATAR_URL = 'SET_AVATAR_URL'\r\n","import * as types from './authTypes'\r\n\r\nexport const changeInput = (name, value) => {\r\n    return { type: types.CHANGE_INPUT, name, value }\r\n}\r\nexport const clearInput = name => {\r\n    return { type: types.CLEAR_INPUT, name }\r\n}\r\nexport const clearAllInputs = () => {\r\n    return { type: types.CLEAR_ALL_INPUTS }\r\n}\r\nexport const clearPasswordInput = () => {\r\n    return { type: types.CLEAR_PASSWORD_INPUT }\r\n}\r\nexport const setMessage = message => {\r\n    return async dispatch => {\r\n        dispatch({ type: types.SET_MESSAGE, message })\r\n        setTimeout(() => dispatch(clearMessage()), 3000)\r\n    }\r\n}\r\nexport const clearMessage = () => {\r\n    return { type: types.CLEAR_MESSAGE }\r\n}\r\nexport const setOnWarning = name => {\r\n    return async dispatch => {\r\n        dispatch({ type: types.SET_ON_WARNING, name })\r\n        setTimeout(() => dispatch(setOffWarning(name)), 3000)\r\n    }\r\n}\r\nexport const setOffWarning = name => {\r\n    return { type: types.SET_OFF_WARNING, name }\r\n}\r\nexport const setSubmitEnabled = () => {\r\n    return { type: types.SET_SUBMIT_ENABLED }\r\n}\r\nexport const setSubmitDisabled = () => {\r\n    return { type: types.SET_SUBMIT_DISABLED }\r\n}\r\nexport const authentication = (token, nickName) => {\r\n    return async (dispatch, getState) => {\r\n        if (!localStorage.getItem('userData')) {\r\n            localStorage.setItem(\r\n                'userData',\r\n                JSON.stringify({ token, nickName })\r\n            )\r\n        }\r\n        await dispatch({ type: types.LOGIN_USER, token, nickName })\r\n        const state = getState()\r\n        if (!!state.authReducer.token) {\r\n            dispatch({ type: types.IS_AUTH_TRUE })\r\n        }\r\n    }\r\n}\r\nexport const logout = () => {\r\n    return async (dispatch, getState) => {\r\n        localStorage.removeItem('userData')\r\n        await dispatch({ type: types.LOGOUT_USER })\r\n        const state = getState()\r\n        if (!state.authReducer.token) {\r\n            dispatch({ type: types.IS_AUTH_FALSE })\r\n        }\r\n    }\r\n}\r\nexport const setAvatarUrl = newAvatarUrl => {\r\n    return { type: types.SET_AVATAR_URL, newAvatarUrl }\r\n}\r\n","import React, { useCallback, useEffect, useRef } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport AuthHeader from '../components/AuthHeader'\r\nimport Footer from '../components/Footer'\r\nimport { PUBLIC_URL } from '../constants'\r\nimport {\r\n    changeInput,\r\n    clearAllInputs,\r\n    setSubmitEnabled,\r\n    setSubmitDisabled,\r\n    authentication,\r\n    clearMessage,\r\n} from '../redux/authenticationLogic/authActionCreators'\r\nimport { LOGIN } from '../redux/authenticationLogic/authTypes'\r\n\r\nexport default function AuthorizationPage() {\r\n    // Получаем dispatch из react-redux\r\n    const dispatch = useDispatch()\r\n    // Получаем state из authReducer\r\n    const auth = useSelector(state => state.authReducer)\r\n    const nickName = useRef(null)\r\n    const password = useRef(null)\r\n    const submit = useRef(null)\r\n\r\n    const clearForm = async () => {\r\n        dispatch(clearAllInputs())\r\n        dispatch(clearMessage())\r\n    }\r\n\r\n    // Отправляет форму на сервер\r\n    const submitForm = async e => {\r\n        e.preventDefault()\r\n        const body = {\r\n            nickName: auth.formInputs.nickName,\r\n            password: auth.formInputs.password,\r\n        }\r\n        dispatch({ type: LOGIN, body })\r\n    }\r\n\r\n    // Записывает значение инпута в соответствующее поле в нашем store\r\n    const inputHandler = async e => {\r\n        dispatch(changeInput(e.target.name, e.target.value))\r\n    }\r\n\r\n    // Функция для проверки полей инпутов\r\n    const checkInputs = useCallback(() => {\r\n        if (auth.formInputs.nickName === '') return false\r\n        else if (auth.formInputs.password === '') return false\r\n        else return true\r\n    }, [auth.formInputs.nickName, auth.formInputs.password])\r\n\r\n    // Следим за изменением инпутов, и при их изменении, проверяем пустые ли они, если все поля заполнены, кнопка становится активной\r\n    useEffect(() => {\r\n        if (checkInputs()) {\r\n            dispatch(setSubmitEnabled())\r\n            submit.current.classList.add('active')\r\n        } else {\r\n            dispatch(setSubmitDisabled())\r\n            submit.current.classList.remove('active')\r\n        }\r\n    }, [auth.formInputs, checkInputs, dispatch])\r\n\r\n    useEffect(() => {\r\n        const data = JSON.parse(localStorage.getItem('userData'))\r\n        if (data && data.token) {\r\n            dispatch(authentication(data.token, data.nickName))\r\n        }\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        switch (auth.responseMessage) {\r\n            case 'Такого пользователя не существует':\r\n                nickName.current.setAttribute(\r\n                    'placeholder',\r\n                    `${auth.responseMessage}`\r\n                )\r\n                nickName.current.classList.add('warning')\r\n                break\r\n            case 'Неверный пароль':\r\n                password.current.setAttribute(\r\n                    'placeholder',\r\n                    `${auth.responseMessage}`\r\n                )\r\n                password.current.classList.add('warning')\r\n                break\r\n            default:\r\n                nickName.current.setAttribute('placeholder', 'Введите ник')\r\n                nickName.current.classList.remove('warning')\r\n                password.current.setAttribute('placeholder', 'Введите пароль')\r\n                password.current.classList.remove('warning')\r\n                break\r\n        }\r\n    }, [auth.responseMessage])\r\n\r\n    return (\r\n        <>\r\n            <title>Вход</title>\r\n            <div className='wrapper'>\r\n                <div className='auth'>\r\n                    <AuthHeader />\r\n                    <div className='auth__container container'>\r\n                        <div className='auth__body'>\r\n                            <img\r\n                                className='auth__body-image'\r\n                                src={PUBLIC_URL + '/auth-picture.svg'}\r\n                                alt='Куча людей'\r\n                            />\r\n                            <div className='auth__fields'>\r\n                                <form className='auth__form'>\r\n                                    <div className='auth__header'>\r\n                                        Авторизация\r\n                                    </div>\r\n                                    {auth.responseMessage ===\r\n                                    'Ошибка на сервере' ? (\r\n                                        <div>{auth.responseMessage}</div>\r\n                                    ) : null}\r\n                                    <input\r\n                                        className='auth__input'\r\n                                        ref={nickName}\r\n                                        type='text'\r\n                                        name='nickName'\r\n                                        onChange={inputHandler}\r\n                                        autoComplete='off'\r\n                                        value={auth.formInputs.nickName}\r\n                                        placeholder='Введите ник или почту'\r\n                                    />\r\n                                    <input\r\n                                        className='auth__input'\r\n                                        ref={password}\r\n                                        type='password'\r\n                                        name='password'\r\n                                        onChange={inputHandler}\r\n                                        autoComplete='off'\r\n                                        value={auth.formInputs.password}\r\n                                        placeholder='Введите пароль'\r\n                                    />\r\n                                    <div className='auth__buttons'>\r\n                                        <button\r\n                                            className='auth__button'\r\n                                            ref={submit}\r\n                                            type='submit'\r\n                                            onClick={submitForm}\r\n                                            disabled={auth.submitButton}\r\n                                        >\r\n                                            Войти\r\n                                        </button>\r\n                                        <Link\r\n                                            to='/registration'\r\n                                            className='auth__button reg'\r\n                                            onClick={clearForm}\r\n                                        >\r\n                                            Регистрация\r\n                                        </Link>\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <Footer />\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","export const CHANGE_POST_FIELD = 'CHANGE_NEW_POST'\r\nexport const CLEAR_POST_FIELD = 'CLEAR_POST_FIELD'\r\nexport const PUBLISH_POST = 'PUBLISH_POST'\r\nexport const UPLOAD_POSTS = 'UPLOAD_POSTS'\r\nexport const CHECK_NEW_POSTS = 'CHECK_NEW_POSTS'\r\nexport const UPDATE_POST_LIST = 'UPDATE_POST_LIST'\r\nexport const CLEAR_POST_LIST = 'CLEAR_POST_LIST'\r\nexport const SET_LOADING_TRUE = 'SET_LOADING_TRUE'\r\nexport const SET_LOADING_FALSE = 'SET_LOADING_FALSE'\r\nexport const LIKE_CHANGING = 'LIKE_CHANGING'\r\n","import * as types from './postsTypes'\r\n\r\nexport const changePostField = payload => {\r\n    return { type: types.CHANGE_POST_FIELD, payload }\r\n}\r\nexport const clearPostField = () => {\r\n    return { type: types.CLEAR_POST_FIELD }\r\n}\r\nexport const updatePostList = payload => {\r\n    return { type: types.UPDATE_POST_LIST, payload }\r\n}\r\nexport const clearPostList = () => {\r\n    return { type: types.CLEAR_POST_LIST }\r\n}\r\nexport const setLoadingTrue = () => {\r\n    return { type: types.SET_LOADING_TRUE }\r\n}\r\nexport const setLoadingFalse = () => {\r\n    return { type: types.SET_LOADING_FALSE }\r\n}\r\n","import { useCallback } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { verify } from 'jsonwebtoken'\r\nimport {\r\n    logout,\r\n    setMessage,\r\n} from '../redux/authenticationLogic/authActionCreators'\r\nimport { JWT_SECRET } from '../constants'\r\n\r\nexport default function useCheckToken() {\r\n    const dispatch = useDispatch()\r\n    const token = useSelector(state => state.authReducer.token)\r\n\r\n    const logoutApp = useCallback(() => {\r\n        dispatch(logout())\r\n        dispatch(setMessage('Время сессии закончилось'))\r\n    }, [dispatch])\r\n\r\n    const checkTokenExpire = useCallback(() => {\r\n        try {\r\n            verify(token, JWT_SECRET)\r\n            return false\r\n        } catch (error) {\r\n            logoutApp()\r\n            return true\r\n        }\r\n    }, [token, logoutApp])\r\n\r\n    return checkTokenExpire\r\n}","export const ibg = () => {\r\n    let ibg = document.querySelectorAll('.ibg')\r\n    for (var i = 0; i < ibg.length; i++) {\r\n        if (ibg[i].querySelector('img')) {\r\n            ibg[i].style.backgroundImage =\r\n                'url(' + ibg[i].querySelector('img').getAttribute('src') + ')'\r\n        }\r\n    }\r\n}","import React, { useCallback, useEffect, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport useCheckToken from '../hooks/useCheckToken'\r\nimport { ibg } from '../hooks/useIbg'\r\nimport { LIKE_CHANGING } from '../redux/postsLogic/postsTypes'\r\n\r\nexport default function Post({ post, currentTime }) {\r\n    ibg()\r\n    // currentTime time units\r\n    const currentSec = Math.floor(currentTime / 1000)\r\n    const currentDay = new Date(currentTime).getDate()\r\n    const currentMonth = new Date(currentTime).getMonth()\r\n    const currentYear = new Date(currentTime).getFullYear()\r\n    // Post time units\r\n    const postSec = Math.floor(post.date / 1000)\r\n    const postMin = new Date(post.date).getMinutes()\r\n    const postHour = new Date(post.date).getHours()\r\n    const postDay = new Date(post.date).getDate()\r\n    const postMonth = new Date(post.date).getMonth()\r\n    const postYear = new Date(post.date).getFullYear()\r\n\r\n    const dispatch = useDispatch()\r\n    const nickName = useSelector(state => state.authReducer.nickName)\r\n    const [warn, setWarn] = useState(null)\r\n    const checkTokenExpire = useCheckToken()\r\n    const linkToAuthorProfile = `/profile/${post.author}`\r\n    const [likes, setLikes] = useState(post.likes)\r\n    const [liked, setLiked] = useState(likes.includes(nickName))\r\n    const [renderCount, setRenderCount] = useState(0)\r\n    const body = useRef(null)\r\n\r\n    const dateFormating = timeDiffSec => {\r\n        // Секунды\r\n        if (timeDiffSec <= 10) return 'только что'\r\n        else if (timeDiffSec < 20) return `${timeDiffSec} секунд назад`\r\n        else if (timeDiffSec < 59 && timeDiffSec % 10 === 1)\r\n            return `${timeDiffSec} секунду назад`\r\n        else if (\r\n            timeDiffSec < 59 &&\r\n            (timeDiffSec % 10 === 2 ||\r\n                timeDiffSec % 10 === 3 ||\r\n                timeDiffSec % 10 === 4)\r\n        )\r\n            return `${timeDiffSec} секунды назад`\r\n        else if (timeDiffSec < 59) return `${timeDiffSec} секунд назад`\r\n        // Минуты\r\n        else if (timeDiffSec < 119) return 'минуту назад'\r\n        else if (timeDiffSec < 179) return 'две минуты назад'\r\n        else if (timeDiffSec < 239) return 'три минуты назад'\r\n        else if (timeDiffSec < 299) return '4 минуты назад'\r\n        else if (Math.floor(timeDiffSec / 60) < 20)\r\n            return `${Math.floor(timeDiffSec / 60)} минут назад`\r\n        else if (\r\n            Math.floor(timeDiffSec / 60) < 59 &&\r\n            Math.floor(timeDiffSec / 60) % 10 === 1\r\n        )\r\n            return `${Math.floor(timeDiffSec / 60)} минутy назад`\r\n        else if (\r\n            Math.floor(timeDiffSec / 60) < 59 &&\r\n            (Math.floor(timeDiffSec / 60) % 10 === 2 ||\r\n                Math.floor(timeDiffSec / 60) % 10 === 3 ||\r\n                Math.floor(timeDiffSec / 60) % 10 === 4)\r\n        )\r\n            return `${Math.floor(timeDiffSec / 60)} минуты назад`\r\n        else if (Math.floor(timeDiffSec / 60) < 59)\r\n            return `${Math.floor(timeDiffSec / 60)} минут назад`\r\n        // Часы\r\n        else if (Math.floor(timeDiffSec / 60) < 119) return 'час назад'\r\n        else if (Math.floor(timeDiffSec / 60) < 179) return 'два часа назад'\r\n        else if (Math.floor(timeDiffSec / 60) < 239) return 'три часа назад'\r\n        else if (\r\n            currentDay === postDay &&\r\n            currentMonth === postMonth &&\r\n            currentYear === postYear\r\n        ) {\r\n            const formatedMin = postMin < 10 ? `0${postMin}` : postMin\r\n            return `сегодня в ${postHour}:${formatedMin}`\r\n        } else if (\r\n            (currentDay === postDay + 1 &&\r\n                currentMonth === postMonth &&\r\n                currentYear === postYear) ||\r\n            (postDay > currentDay &&\r\n                ((currentMonth === postMonth + 1 && currentYear === postYear) ||\r\n                    (postMonth - currentMonth === 11 &&\r\n                        currentYear - postYear === 1)))\r\n        ) {\r\n            const formatedMin = postMin < 10 ? `0${postMin}` : postMin\r\n            return `вчера в ${postHour}:${formatedMin}`\r\n        } else if (currentYear === postYear) {\r\n            const formatedMin = postMin < 10 ? `0${postMin}` : postMin\r\n            switch (postMonth) {\r\n                case 0:\r\n                    return `${postDay} янв в ${postHour}:${formatedMin}`\r\n                case 1:\r\n                    return `${postDay} фев в ${postHour}:${formatedMin}`\r\n                case 2:\r\n                    return `${postDay} мар в ${postHour}:${formatedMin}`\r\n                case 3:\r\n                    return `${postDay} апр в ${postHour}:${formatedMin}`\r\n                case 4:\r\n                    return `${postDay} мая в ${postHour}:${formatedMin}`\r\n                case 5:\r\n                    return `${postDay} июн в ${postHour}:${formatedMin}`\r\n                case 6:\r\n                    return `${postDay} июл в ${postHour}:${formatedMin}`\r\n                case 7:\r\n                    return `${postDay} авг в ${postHour}:${formatedMin}`\r\n                case 8:\r\n                    return `${postDay} сен в ${postHour}:${formatedMin}`\r\n                case 9:\r\n                    return `${postDay} окт в ${postHour}:${formatedMin}`\r\n                case 10:\r\n                    return `${postDay} ноя в ${postHour}:${formatedMin}`\r\n                case 11:\r\n                    return `${postDay} дек в ${postHour}:${formatedMin}`\r\n                default:\r\n                    return 'некорректный месяц'\r\n            }\r\n        } else if (currentYear > postYear) {\r\n            switch (postMonth) {\r\n                case 0:\r\n                    return `${postDay} янв ${postYear}`\r\n                case 1:\r\n                    return `${postDay} фев ${postYear}`\r\n                case 2:\r\n                    return `${postDay} мар ${postYear}`\r\n                case 3:\r\n                    return `${postDay} апр ${postYear}`\r\n                case 4:\r\n                    return `${postDay} мая ${postYear}`\r\n                case 5:\r\n                    return `${postDay} июн ${postYear}`\r\n                case 6:\r\n                    return `${postDay} июл ${postYear}`\r\n                case 7:\r\n                    return `${postDay} авг ${postYear}`\r\n                case 8:\r\n                    return `${postDay} сен ${postYear}`\r\n                case 9:\r\n                    return `${postDay} окт ${postYear}`\r\n                case 10:\r\n                    return `${postDay} ноя ${postYear}`\r\n                case 11:\r\n                    return `${postDay} дек ${postYear}`\r\n                default:\r\n                    return 'некорректный месяц'\r\n            }\r\n        }\r\n        return 'Неверная дата'\r\n    }\r\n\r\n    const likeHolder = useCallback(\r\n        e => {\r\n            if (!checkTokenExpire() && post.author !== nickName) {\r\n                if (!liked) {\r\n                    const tempLikes = [...likes]\r\n                    tempLikes.push(nickName)\r\n                    setLikes(tempLikes)\r\n                } else {\r\n                    setLikes(state => state.filter(item => item !== nickName))\r\n                }\r\n            } else {\r\n                setWarn('Нельзя лайкать свои посты')\r\n                setTimeout(() => setWarn(null), 1700)\r\n            }\r\n        },\r\n        [checkTokenExpire, liked, likes, nickName, post.author]\r\n    )\r\n\r\n    // TODO: Удалить эту функцию когда будет добавлен нормальный функционал\r\n    const rawHolder = () => {\r\n        setWarn('Эта кнопка пока не работает')\r\n        setTimeout(() => setWarn(null), 1700)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (warn) {\r\n            body.current.classList.add('warning')\r\n        } else {\r\n            body.current.classList.remove('warning')\r\n        }\r\n    }, [warn])\r\n\r\n    useEffect(() => {\r\n        if (renderCount > 0) {\r\n            dispatch({ type: LIKE_CHANGING, postId: post._id, newLikes: likes })\r\n            setLiked(liked => !liked)\r\n        }\r\n        setRenderCount(renderCount => renderCount + 1)\r\n    }, [dispatch, post._id, likes])\r\n\r\n    return (\r\n        <>\r\n            <div ref={body} className='posts-body__post'>\r\n                <div className='posts-body__header'>\r\n                    <div className='posts-body__info'>\r\n                        <Link\r\n                            to={linkToAuthorProfile}\r\n                            className='posts-body__avatar ibg'\r\n                        >\r\n                            <img src={post.avatarUrl} alt='аватарка' />\r\n                        </Link>\r\n                        <div className='posts-body__info-column'>\r\n                            <Link\r\n                                to={linkToAuthorProfile}\r\n                                className='posts-body__author'\r\n                            >\r\n                                {post.author}\r\n                            </Link>\r\n                            <span className='posts-body__date'>\r\n                                {dateFormating(currentSec - postSec)}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    {warn ? (\r\n                        <div className='posts-body__warning'>{warn}</div>\r\n                    ) : null}\r\n                    <i\r\n                        className='posts-body__frame fas fa-reply'\r\n                        onClick={rawHolder}\r\n                    />\r\n                </div>\r\n                <div className='posts-body__content'>\r\n                    <div className='posts-body__text'>{post.text}</div>\r\n                    <div className='posts-body__image'></div>\r\n                </div>\r\n                <div className='posts-body__footer'>\r\n                    <div className='posts-body__stat'>\r\n                        {liked ? (\r\n                            <i\r\n                                onClick={likeHolder}\r\n                                className='posts-body__frame fas fa-heart'\r\n                            />\r\n                        ) : (\r\n                            <i\r\n                                onClick={likeHolder}\r\n                                className='posts-body__frame far fa-heart'\r\n                            />\r\n                        )}{' '}\r\n                        {likes.length}\r\n                    </div>\r\n                    <div className='posts-body__stat'>\r\n                        <i\r\n                            className='posts-body__frame far fa-comment-alt'\r\n                            onClick={rawHolder}\r\n                        />\r\n                        0\r\n                    </div>\r\n                    <div className='posts-body__stat'>\r\n                        <i\r\n                            className='posts-body__frame fas fa-share'\r\n                            onClick={rawHolder}\r\n                        />{' '}\r\n                        0\r\n                    </div>\r\n                    <div className='posts-body__stat'>\r\n                        <i className='posts-body__frame views far fa-eye' />\r\n                        {post.views.length}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Post from './Post'\r\n\r\nexport default function PostList({ uploadedPosts }) {\r\n    return (\r\n        <div>\r\n            {uploadedPosts.map(item => (\r\n                <Post post={item} currentTime={Date.now()} key={item._id} />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { ibg } from '../hooks/useIbg'\r\nimport { logout } from '../redux/authenticationLogic/authActionCreators'\r\nimport { PUBLIC_URL } from '../constants'\r\n\r\nexport default function Header() {\r\n    const dispatch = useDispatch()\r\n    const nickName = useSelector(state => state.authReducer.nickName)\r\n    const avatarUrl = useSelector(state => state.authReducer.avatarUrl)\r\n    const linkToProfile = `/profile/${nickName}`\r\n    const addMenu = useRef(null)\r\n    const menu = useRef(null)\r\n\r\n    const logoutApp = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n    const showMenu = () => {\r\n        addMenu.current.classList.toggle('covert')\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('click', e => {\r\n            if (\r\n                e.target &&\r\n                addMenu.current &&\r\n                e.target !== menu.current &&\r\n                e.target.parentNode !== menu.current\r\n            ) {\r\n                addMenu.current.classList.add('covert')\r\n            }\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        ibg()\r\n    }, [avatarUrl])\r\n\r\n    return (\r\n        <>\r\n            <div className='header'>\r\n                <div className='header__container container'>\r\n                    <Link to='/' className='header__mini-logo'>\r\n                        <img\r\n                            src={PUBLIC_URL + '/minilogo.svg'}\r\n                            alt='минилого'\r\n                        />\r\n                    </Link>\r\n                    <form className='header__form'>\r\n                        <input\r\n                            className='header__search'\r\n                            id='search'\r\n                            type='search'\r\n                            placeholder='Поиск постов...'\r\n                            autoComplete='off'\r\n                            disabled='disabled'\r\n                        />\r\n                        <i className='header__search-btn fas fa-search'></i>\r\n                    </form>\r\n                    <div className='header__menu' onClick={showMenu} ref={menu}>\r\n                        <span>Меню</span>\r\n                        <i className='fas fa-bars' />\r\n                        <div\r\n                            className='header__additional-menu additional-menu covert'\r\n                            ref={addMenu}\r\n                        >\r\n                            <Link\r\n                                to={linkToProfile}\r\n                                className='additional-menu__link'\r\n                            >\r\n                                <div>Аккаунт</div>\r\n                                <div className='additional-menu__avatar ibg'>\r\n                                    <img src={avatarUrl} alt='аватарка' />\r\n                                </div>\r\n                            </Link>\r\n                            {/* <Link\r\n                                to='/settings'\r\n                                className='additional-menu__link'\r\n                            >\r\n                                Настройки\r\n                            </Link> */}\r\n                            <a\r\n                                className='additional-menu__link'\r\n                                href='https://github.com/Zothe0/social-network'\r\n                            >\r\n                                Исходники\r\n                            </a>\r\n                            <div\r\n                                onClick={logoutApp}\r\n                                className='additional-menu__link'\r\n                            >\r\n                                Выйти\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { useEffect, useCallback, useRef } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setMessage } from '../redux/authenticationLogic/authActionCreators'\r\nimport {\r\n    changePostField,\r\n    clearPostField,\r\n} from '../redux/postsLogic/postsActionCreators'\r\nimport * as types from '../redux/postsLogic/postsTypes'\r\nimport PostList from '../components/PostList'\r\nimport useCheckToken from '../hooks/useCheckToken'\r\nimport Header from '../components/Header'\r\nimport { UPLOAD_CURRENT_PROFILE_AVATAR_URL } from '../redux/profileLogic/profileTypes'\r\nimport { ibg } from '../hooks/useIbg'\r\n\r\nexport default function PostsPage() {\r\n    const dispatch = useDispatch()\r\n    const auth = useSelector(state => state.authReducer)\r\n    const posts = useSelector(state => state.postsReducer)\r\n    const checkTokenExpire = useCheckToken()\r\n    const bottomBreakPoint = useRef(null)\r\n    const textarea = useRef(null)\r\n    let previousYOffset = window.pageYOffset\r\n\r\n    const inputHandler = e => {\r\n        dispatch(changePostField(e.target.value))\r\n        // dispatch({ type: types.UPLOAD_POSTS, render: true})\r\n        dispatch({ type: types.CHECK_NEW_POSTS })\r\n    }\r\n\r\n    const checkInput = () => {\r\n        if (posts.postField === '') return false\r\n        else return true\r\n    }\r\n\r\n    const enterHandler = e => {\r\n        if (e.keyCode === 13) {\r\n            publish(e)\r\n        }\r\n    }\r\n\r\n    const publish = e => {\r\n        e.preventDefault()\r\n        if (!checkTokenExpire() && checkInput()) {\r\n            dispatch({ type: types.PUBLISH_POST })\r\n            dispatch(clearPostField())\r\n        } else dispatch(setMessage('Пост не может быть пустым'))\r\n    }\r\n\r\n    const uploadPosts = useCallback(() => {\r\n        if (!checkTokenExpire()) dispatch({ type: types.UPLOAD_POSTS })\r\n    }, [checkTokenExpire, dispatch])\r\n\r\n    const focusArea = e => {\r\n        e.target.classList.add('focus')\r\n    }\r\n\r\n    // Проверка действительности токена при каждом ререндере страницы\r\n    // А также загрузка первой партии постов\r\n    useEffect(() => {\r\n        if (!checkTokenExpire() && posts.uploadedPosts.length === 0)\r\n            uploadPosts()\r\n    }, [checkTokenExpire, posts.uploadedPosts, uploadPosts])\r\n\r\n    useEffect(() => {\r\n        if (!checkTokenExpire())\r\n            dispatch({\r\n                type: UPLOAD_CURRENT_PROFILE_AVATAR_URL,\r\n                nickName: auth.nickName,\r\n            })\r\n    }, [checkTokenExpire, dispatch, auth.nickName])\r\n\r\n    useEffect(() => {\r\n        if (\r\n            auth.responseMessage !== null &&\r\n            auth.responseMessage !== undefined\r\n        ) {\r\n            textarea.current.setAttribute('placeholder', auth.responseMessage)\r\n            textarea.current.classList.add('warning')\r\n        } else {\r\n            textarea.current.setAttribute('placeholder', 'Создать пост')\r\n            textarea.current.classList.remove('warning')\r\n        }\r\n    }, [auth.responseMessage])\r\n\r\n    useEffect(() => {\r\n        ibg()\r\n\r\n        window.addEventListener('click', e => {\r\n            if (e.target !== textarea.current && textarea.current) {\r\n                textarea.current.classList.remove('focus')\r\n            }\r\n        })\r\n\r\n        window.addEventListener('scroll', e => {\r\n            if (\r\n                bottomBreakPoint.current &&\r\n                window.pageYOffset >=\r\n                    bottomBreakPoint.current.offsetTop - 1000 &&\r\n                window.pageYOffset > previousYOffset\r\n            ) {\r\n                if (!checkTokenExpire()) {\r\n                    uploadPosts()\r\n                    previousYOffset = window.pageYOffset\r\n                }\r\n            }\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <title>Посты</title>\r\n            <div className='wrapper'>\r\n                <Header />\r\n                <div className='posts-body'>\r\n                    <form onSubmit={publish} className='posts-body__form'>\r\n                        <textarea\r\n                            className='posts-body__textarea'\r\n                            ref={textarea}\r\n                            rows='1'\r\n                            maxLength={400}\r\n                            placeholder='Создать пост...'\r\n                            onChange={inputHandler}\r\n                            onKeyDown={enterHandler}\r\n                            onFocus={focusArea}\r\n                            value={posts.postField}\r\n                        />\r\n                        <button className='posts-body__frame btn' type='submit'>\r\n                            <i className='fas fa-plus' />\r\n                        </button>\r\n                    </form>\r\n                    {posts.loading ? (\r\n                        <div className='loading-frame posts-body__loading-frame'>\r\n                            <i className='loading-frame__item fas fa-sync-alt' />\r\n                        </div>\r\n                    ) : null}\r\n                    <PostList uploadedPosts={posts.uploadedPosts} />\r\n                    <div\r\n                        ref={bottomBreakPoint}\r\n                        className='posts-body__breakpoint'\r\n                    />\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","export const SET_FILE_INPUT = 'SET_FILE_INPUT'\r\nexport const SEND_AVATAR_IMAGE = 'SEND_AVATAR_IMAGE'\r\nexport const UPLOAD_CURRENT_PROFILE_AVATAR_URL = 'UPLOAD_PROFILE_AVATAR_URL'\r\nexport const SET_CURRENT_PROFILE_AVATAR_URL = 'SET_CURRENT_PROFILE_AVATAR_URL'\r\n","import React, { useCallback, useEffect, useRef } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport {\r\n    changeInput,\r\n    setSubmitEnabled,\r\n    setSubmitDisabled,\r\n    clearInput,\r\n    clearMessage,\r\n    clearAllInputs,\r\n} from '../redux/authenticationLogic/authActionCreators'\r\nimport { REGISTRATION } from '../redux/authenticationLogic/authTypes'\r\nimport AuthHeader from '../components/AuthHeader'\r\nimport Footer from '../components/Footer'\r\nimport { PUBLIC_URL } from '../constants'\r\n\r\nexport default function RegistrationPage() {\r\n    // Получаем dispatch из react-redux\r\n    const dispatch = useDispatch()\r\n    // Получаем state из authReducer\r\n    const auth = useSelector(state => state.authReducer)\r\n    const nickName = useRef(null)\r\n    const password = useRef(null)\r\n    const submit = useRef(null)\r\n\r\n    // Отправляет форму на сервер\r\n    const submitForm = async e => {\r\n        // TODO: запретить использовать в нике особые символы типа $%^&@!()\r\n        e.preventDefault()\r\n        dispatch({ type: REGISTRATION, body: auth.formInputs })\r\n    }\r\n\r\n    // Записывает значение инпута в соответствующее поле в нашем store\r\n    const inputHandler = async e => {\r\n        dispatch(changeInput(e.target.name, e.target.value))\r\n    }\r\n\r\n    const clearForm = async () => {\r\n        dispatch(clearAllInputs())\r\n        dispatch(clearMessage())\r\n    }\r\n\r\n    // Функция для проверки полей инпутов\r\n    const checkInputs = useCallback(() => {\r\n        if (auth.formInputs.nickName === '') return false\r\n        else if (auth.formInputs.password === '') return false\r\n        else return true\r\n    }, [auth.formInputs.nickName, auth.formInputs.password])\r\n\r\n    // Следим за изменением инпутов, и при их изменении, проверяем пустые ли они, если все поля заполнены, кнопка становится активной\r\n    useEffect(() => {\r\n        if (checkInputs()) {\r\n            dispatch(setSubmitEnabled())\r\n            submit.current.classList.add('active')\r\n        } else {\r\n            dispatch(setSubmitDisabled())\r\n            submit.current.classList.remove('active')\r\n        }\r\n    }, [auth.formInputs, checkInputs, dispatch])\r\n\r\n    useEffect(() => {\r\n        if (auth.warnings.nickName) {\r\n            dispatch(clearInput('nickName'))\r\n            nickName.current.setAttribute(\r\n                'placeholder',\r\n                'Минимальная длина ника 4 символа'\r\n            )\r\n            nickName.current.classList.add('warning')\r\n        } else {\r\n            nickName.current.setAttribute('placeholder', 'Введите ник')\r\n            nickName.current.classList.remove('warning')\r\n        }\r\n        if (auth.warnings.password) {\r\n            dispatch(clearInput('password'))\r\n            password.current.setAttribute(\r\n                'placeholder',\r\n                'Минимальная длина пароля 6 символов'\r\n            )\r\n            password.current.classList.add('warning')\r\n        } else {\r\n            password.current.setAttribute('placeholder', 'Введите пароль')\r\n            password.current.classList.remove('warning')\r\n        }\r\n    }, [auth.warnings, dispatch])\r\n\r\n    useEffect(() => {\r\n        switch (auth.responseMessage) {\r\n            case 'Такой ник уже зарегистрирован':\r\n                dispatch(clearInput('nickName'))\r\n                nickName.current.setAttribute(\r\n                    'placeholder',\r\n                    `${auth.responseMessage}`\r\n                )\r\n                nickName.current.classList.add('warning')\r\n                break\r\n\r\n            default:\r\n                nickName.current.setAttribute('placeholder', 'Введите ник')\r\n                nickName.current.classList.remove('warning')\r\n                break\r\n        }\r\n    }, [auth.responseMessage, dispatch])\r\n\r\n    return (\r\n        <>\r\n            <title>Регистрация</title>\r\n            <div className='wrapper'>\r\n                <div className='auth'>\r\n                    <AuthHeader />\r\n                    <div className='auth__container container'>\r\n                        <div className='auth__body'>\r\n                            <img\r\n                                className='auth__body-image'\r\n                                src={PUBLIC_URL + '/auth-picture.svg'}\r\n                                alt='Куча людей'\r\n                            />\r\n                            <div className='auth__fields'>\r\n                                <form className='auth__form'>\r\n                                    <div className='auth__header'>\r\n                                        Регистрация\r\n                                    </div>\r\n                                    {auth.responseMessage ===\r\n                                    'Ошибка на сервере' ? (\r\n                                        <div>{auth.responseMessage}</div>\r\n                                    ) : null}\r\n                                    <input\r\n                                        className='auth__input'\r\n                                        ref={nickName}\r\n                                        type='text'\r\n                                        name='nickName'\r\n                                        onChange={inputHandler}\r\n                                        autoComplete='off'\r\n                                        value={auth.formInputs.nickName}\r\n                                        placeholder='Введите ник'\r\n                                    />\r\n                                    <input\r\n                                        className='auth__input'\r\n                                        ref={password}\r\n                                        type='password'\r\n                                        name='password'\r\n                                        onChange={inputHandler}\r\n                                        autoComplete='off'\r\n                                        value={auth.formInputs.password}\r\n                                        placeholder='Введите пароль'\r\n                                    />\r\n                                    <div className='auth__buttons'>\r\n                                        <button\r\n                                            className='auth__button'\r\n                                            ref={submit}\r\n                                            type='submit'\r\n                                            onClick={submitForm}\r\n                                            disabled={auth.submitButton}\r\n                                        >\r\n                                            Регистрация\r\n                                        </button>\r\n                                        <Link\r\n                                            to='/authorization'\r\n                                            className='auth__button reg'\r\n                                            onClick={clearForm}\r\n                                        >\r\n                                            Вход\r\n                                        </Link>\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <Footer />\r\n                </div>\r\n            </div>\r\n            <div className='auth-container'>\r\n                <form className='auth-column'>\r\n                    {auth.responseMessage ? (\r\n                        <div className='auth-warn'>{auth.responseMessage}</div>\r\n                    ) : null}\r\n                    {auth.warnings.nickName ? (\r\n                        <label htmlFor='nick' className='auth-warn'>\r\n                            Минимальная длина ника 4 символа\r\n                        </label>\r\n                    ) : null}\r\n                    {auth.warnings.email ? (\r\n                        <label htmlFor='nick' className='auth-warn'>\r\n                            Введите корректную почту\r\n                        </label>\r\n                    ) : null}\r\n                    {auth.warnings.password ? (\r\n                        <label htmlFor='nick' className='auth-warn'>\r\n                            Минимальная длина пароля 6 символов\r\n                        </label>\r\n                    ) : null}\r\n                </form>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import * as types from './profileTypes'\r\n\r\nexport const setFileInput = ref => {\r\n    return { type: types.SET_FILE_INPUT, ref }\r\n}\r\n\r\nexport const setCurrentProfileAvatarUrl = newAvatarUrl => {\r\n    return { type: types.SET_CURRENT_PROFILE_AVATAR_URL, newAvatarUrl }\r\n}\r\n","import React, { useEffect, useCallback, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useParams } from 'react-router-dom'\r\nimport Header from '../components/Header'\r\nimport useCheckToken from '../hooks/useCheckToken'\r\nimport { ibg } from '../hooks/useIbg'\r\nimport { setFileInput } from '../redux/profileLogic/profileActionCreators'\r\nimport {\r\n    SEND_AVATAR_IMAGE,\r\n    UPLOAD_CURRENT_PROFILE_AVATAR_URL,\r\n} from '../redux/profileLogic/profileTypes'\r\n\r\nexport default function ProfilePage() {\r\n    const profile = useSelector(state => state.profileReducer)\r\n    const posts = useSelector(state => state.postsReducer)\r\n    const auth = useSelector(state => state.authReducer)\r\n    const dispatch = useDispatch()\r\n    const { id } = useParams()\r\n    const checkTokenExpire = useCheckToken()\r\n    const file = useRef()\r\n    const fileText = useRef()\r\n    const dropArea = useRef()\r\n    let [labelClass, setLabelClass] = useState('profile__file-wrapper')\r\n\r\n    const getAvatarUrl = useCallback(() => {\r\n        dispatch({ type: UPLOAD_CURRENT_PROFILE_AVATAR_URL, nickName: id })\r\n    }, [dispatch, id])\r\n\r\n    const fileHandler = e => {\r\n        fileText.current.innerText = e.target.files[0].name\r\n    }\r\n\r\n    const dropFileHandler = e => {\r\n        e.stopPropagation()\r\n        e.preventDefault()\r\n        hideDropArea(e)\r\n        file.current.files = e.dataTransfer.files\r\n        fileText.current.innerText = file.current.files[0].name\r\n    }\r\n\r\n    const formHandler = async e => {\r\n        e.preventDefault()\r\n        const form = new FormData(e.target)\r\n        form.append('nickName', `${auth.nickName}`)\r\n        form.append('previousAvatarUrl', profile.currentProfileAvatarUrl)\r\n        if (!checkTokenExpire()) dispatch({ type: SEND_AVATAR_IMAGE, form })\r\n        fileText.current.innerText = 'Выберите фотографию'\r\n    }\r\n\r\n    const showDropArea = () => {\r\n        if (dropArea.current) dropArea.current.classList.add('active')\r\n    }\r\n\r\n    const hideDropArea = e => {\r\n        if (dropArea.current) dropArea.current.classList.remove('active')\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!checkTokenExpire()) {\r\n            dispatch(setFileInput(file.current))\r\n            getAvatarUrl()\r\n            ibg()\r\n        }\r\n    }, [\r\n        checkTokenExpire,\r\n        dispatch,\r\n        getAvatarUrl,\r\n        profile.currentProfileAvatarUrl,\r\n    ])\r\n\r\n    useEffect(() => {\r\n        if (\r\n            auth.responseMessage !== null &&\r\n            auth.responseMessage !== undefined\r\n        ) {\r\n            fileText.current.innerText = `${auth.responseMessage}`\r\n            setLabelClass('profile__file-wrapper warning')\r\n        } else {\r\n            fileText.current.innerText = 'Выберите фотографию'\r\n            setLabelClass('profile__file-wrapper')\r\n        }\r\n    }, [auth.responseMessage])\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('dragover', e => {\r\n            e.stopPropagation()\r\n            e.preventDefault()\r\n        })\r\n        window.addEventListener('dragenter', showDropArea)\r\n        window.addEventListener('drop', dropFileHandler)\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <title>Профиль</title>\r\n            <Header />\r\n            <div className='wrapper'>\r\n                <div className='profile'>\r\n                    <div ref={dropArea} className='profile__drop-area'>\r\n                        <div\r\n                            onDragLeave={hideDropArea}\r\n                            className='profile__drag-checker'\r\n                        ></div>\r\n                        <div className='profile__drop-box'>\r\n                            <i className='profile__drop-ico fas fa-download' />\r\n                            <div className='profile__drop-header'>\r\n                                Загрузить фотографию\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='profile__container'>\r\n                        {posts.loading ? (\r\n                            <div className='loading-frame'>\r\n                                <i className='loading-frame__item fas fa-sync-alt' />\r\n                            </div>\r\n                        ) : null}\r\n                        <div className='profile__avatar ibg'>\r\n                            <img\r\n                                src={profile.currentProfileAvatarUrl}\r\n                                alt='аватарка'\r\n                            />\r\n                        </div>\r\n                        {auth.nickName === id ? (\r\n                            <>\r\n                                <div className='profile__header'>\r\n                                    Установить новую фотографию профиля:\r\n                                </div>\r\n                                <form\r\n                                    onSubmit={formHandler}\r\n                                    className='profile__form'\r\n                                    name='form'\r\n                                    encType='multipart/form-data'\r\n                                    action='/api/profile/load-avatar'\r\n                                    method='post'\r\n                                    placeholder='none'\r\n                                >\r\n                                    <div className={labelClass}>\r\n                                        <input\r\n                                            onChange={fileHandler}\r\n                                            type='file'\r\n                                            accept='image/jpeg,image/png,image/webp'\r\n                                            name='avatar'\r\n                                            id='avatar'\r\n                                            ref={file}\r\n                                            className='profile__file'\r\n                                        ></input>\r\n                                        <label\r\n                                            htmlFor='avatar'\r\n                                            onDrop={dropFileHandler}\r\n                                            // onDragEnter={dragFileHandler}\r\n                                            className='profile__file-btn'\r\n                                        >\r\n                                            <i className='profile__file-ico fas fa-download' />\r\n                                            <span\r\n                                                ref={fileText}\r\n                                                className='profile__file-text'\r\n                                            >\r\n                                                Выберите фотографию\r\n                                            </span>\r\n                                        </label>\r\n                                    </div>\r\n                                    <button\r\n                                        className='profile__submit-btn'\r\n                                        type='submit'\r\n                                    >\r\n                                        Отправить\r\n                                    </button>\r\n                                </form>\r\n                            </>\r\n                        ) : null}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function SettingsPage() {\r\n    return <>Настройки</>\r\n}\r\n","import React from 'react'\r\nimport { Switch, Route, Redirect } from 'react-router-dom'\r\nimport AuthorizationPage from './pages/AuthorizationPage'\r\nimport PostsPage from './pages/PostsPage'\r\nimport RegistrationPage from './pages/RegistrationPage'\r\nimport ProfilePage from './pages/ProfilePage'\r\nimport { useSelector } from 'react-redux'\r\nimport SettingsPage from './pages/SettingsPage'\r\n\r\nexport default function Routes() {\r\n    const isAuthorized = useSelector(state => state.authReducer.authorized)\r\n    if (isAuthorized) {\r\n        return (\r\n            <Switch>\r\n                <Route path='/posts'>\r\n                    <PostsPage />\r\n                </Route>\r\n                <Route path='/profile/:id'>\r\n                    <ProfilePage />\r\n                </Route>\r\n                <Route path='/settings'>\r\n                    <SettingsPage />\r\n                </Route>\r\n                <Route path='/'>\r\n                    {<Redirect to='/posts' />}\r\n                </Route>\r\n            </Switch>\r\n        )\r\n    } else {\r\n        return (\r\n            <Switch>\r\n                <Route path='/auth'>\r\n                    <AuthorizationPage />\r\n                </Route>\r\n                <Route path='/registration'>\r\n                    <RegistrationPage />\r\n                </Route>\r\n                <Route path='/'>\r\n                    <Redirect to='/auth' />\r\n                </Route>\r\n            </Switch>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { BrowserRouter as Router } from 'react-router-dom'\r\nimport './fonts/font-faces.css'\r\nimport './css/all.min.css'\r\nimport './css/App.css'\r\nimport Routes from './Routes'\r\n\r\nexport default function App() {\r\n    return (\r\n        <>\r\n            <Router>\r\n                <Routes />\r\n            </Router>\r\n        </>\r\n    )\r\n}\r\n","import * as types from './authTypes'\r\nconst initialState = {\r\n    formInputs: {\r\n        nickName: '',\r\n        password: '',\r\n    },\r\n    warnings: {\r\n        nickName: false,\r\n        password: false,\r\n    },\r\n    submitButton: 'disabled',\r\n    responseMessage: null,\r\n    authorized: false,\r\n    token: null,\r\n    nickName: null,\r\n    avatarUrl: null,\r\n}\r\n\r\nexport default function authReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case types.CHANGE_INPUT:\r\n            return {\r\n                ...state,\r\n                formInputs: {\r\n                    ...state.formInputs,\r\n                    [action.name]: action.value,\r\n                },\r\n            }\r\n\r\n        case types.CLEAR_INPUT:\r\n            return {\r\n                ...state,\r\n                formInputs: { ...state.formInputs, [action.name]: '' },\r\n            }\r\n\r\n        case types.CLEAR_ALL_INPUTS:\r\n            return {\r\n                ...state,\r\n                formInputs: {\r\n                    ...state.formInputs,\r\n                    nickName: '',\r\n                    email: '',\r\n                    password: '',\r\n                },\r\n            }\r\n\r\n        case types.CLEAR_PASSWORD_INPUT:\r\n            return {\r\n                ...state,\r\n                formInputs: { ...state.formInputs, password: '' },\r\n            }\r\n\r\n        case types.SET_ON_WARNING:\r\n            return {\r\n                ...state,\r\n                warnings: { ...state.warnings, [action.name]: true },\r\n            }\r\n\r\n        case types.SET_OFF_WARNING:\r\n            return {\r\n                ...state,\r\n                warnings: { ...state.warnings, [action.name]: false },\r\n            }\r\n\r\n        case types.SET_SUBMIT_ENABLED:\r\n            return { ...state, submitButton: null }\r\n\r\n        case types.SET_SUBMIT_DISABLED:\r\n            return { ...state, submitButton: 'disabled' }\r\n\r\n        case types.SET_MESSAGE:\r\n            return { ...state, responseMessage: action.message }\r\n\r\n        case types.CLEAR_MESSAGE:\r\n            return { ...state, responseMessage: null }\r\n\r\n        case types.LOGIN_USER:\r\n            return {\r\n                ...state,\r\n                token: action.token,\r\n                nickName: action.nickName,\r\n                avatarUrl: action.avatarUrl,\r\n            }\r\n\r\n        case types.LOGOUT_USER:\r\n            return { ...state, token: null, userId: null }\r\n\r\n        case types.IS_AUTH_TRUE:\r\n            return { ...state, authorized: true }\r\n\r\n        case types.IS_AUTH_FALSE:\r\n            return { ...state, authorized: false }\r\n\r\n        case types.SET_AVATAR_URL:\r\n            return { ...state, avatarUrl: action.newAvatarUrl }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import * as types from './postsTypes'\r\n\r\nconst initialState = {\r\n    postField: '',\r\n    uploadedPosts: [],\r\n    loading: false,\r\n}\r\n\r\nexport default function postsReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case types.CHANGE_POST_FIELD:\r\n            return { ...state, postField: action.payload }\r\n\r\n        case types.CLEAR_POST_FIELD:\r\n            return { ...state, postField: '' }\r\n\r\n        case types.UPDATE_POST_LIST:\r\n            return {\r\n                ...state,\r\n                uploadedPosts: [...state.uploadedPosts, ...action.payload],\r\n            }\r\n\r\n        case types.CLEAR_POST_LIST:\r\n            return { ...state, uploadedPosts: [] }\r\n\r\n        case types.SET_LOADING_TRUE:\r\n            return { ...state, loading: true }\r\n\r\n        case types.SET_LOADING_FALSE:\r\n            return { ...state, loading: false }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import * as types from './profileTypes'\r\n\r\nconst initialState = {\r\n    fileInputRef: null,\r\n    currentProfileAvatarUrl: null,\r\n}\r\n\r\nexport default function profileReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case types.SET_FILE_INPUT:\r\n            return { ...state, fileInputRef: action.ref }\r\n\r\n        case types.SET_CURRENT_PROFILE_AVATAR_URL:\r\n            return { ...state, currentProfileAvatarUrl: action.newAvatarUrl }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","const initialState = {\r\n    responseMessage: '',\r\n    loading: true,\r\n}\r\n\r\nexport default function appReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport authReducer from './authenticationLogic/authReducer'\r\nimport postsReducer from './postsLogic/postsReducer'\r\nimport profileReducer from './profileLogic/profileReducer'\r\nimport appReducer from './appLogic/appReducer'\r\n\r\nexport const rootReducer = combineReducers({\r\n    authReducer,\r\n    postsReducer,\r\n    profileReducer,\r\n    appReducer,\r\n})\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(\r\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n        )\r\n)\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config)\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    )\r\n                })\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing\r\n                if (installingWorker == null) {\r\n                    return\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            )\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration)\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.')\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error)\r\n        })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type')\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null &&\r\n                    contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload()\r\n                    })\r\n                })\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            )\r\n        })\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister()\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message)\r\n            })\r\n    }\r\n}\r\n","export const request = async (\r\n    url,\r\n    method = 'GET',\r\n    body = null,\r\n    headers = null\r\n) => {\r\n    if (method === 'GET') {\r\n        try {\r\n            const response = await fetch(url)\r\n            const data = await response.json()\r\n            return data\r\n        } catch (err) {\r\n            throw err\r\n        }\r\n    } else if (method === 'POST' && headers === null) {\r\n        try {\r\n            body = JSON.stringify(body)\r\n            headers = { 'Content-Type': 'application/json' }\r\n            const response = await fetch(url, { method, body, headers })\r\n            const data = await response.json()\r\n            return data\r\n        } catch (err) {\r\n            throw err\r\n        }\r\n    } else if (method === 'POST' && headers !== null) {\r\n        try {\r\n            const response = await fetch(url, { method, body, headers })\r\n            const data = await response.json()\r\n            return data\r\n        } catch (err) {\r\n            throw err\r\n        }\r\n    } else if (method === 'PATCH' && headers === null) {\r\n        try {\r\n            body = JSON.stringify(body)\r\n            headers = { 'Content-Type': 'application/json' }\r\n            const response = await fetch(url, { method, body, headers })\r\n            return response\r\n        } catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n","import { call, put, select } from 'redux-saga/effects'\r\nimport { request } from '../Api'\r\nimport {\r\n    authentication,\r\n    clearAllInputs,\r\n    clearInput,\r\n    clearPasswordInput,\r\n    setMessage,\r\n    setOnWarning,\r\n} from '../authenticationLogic/authActionCreators'\r\nimport { LOGIN } from '../authenticationLogic/authTypes'\r\n\r\n// worker Saga: будет запускаться на экшены типа `USER_FETCH_REQUESTED`\r\nexport function* registration(action) {\r\n    try {\r\n        // call первым аргументом принимает функцию, а остальные будут складываться в параметры вызываемой функции по соответствию\r\n        const response = yield call(\r\n            request,\r\n            '/api/auth/registration',\r\n            'POST',\r\n            action.body\r\n        )\r\n\r\n        if (response.ok) {\r\n            const auth = yield select(state => state.authReducer)\r\n            const body = {\r\n                nickName: auth.formInputs.nickName,\r\n                password: auth.formInputs.password,\r\n            }\r\n            yield put({ type: LOGIN, body })\r\n            yield put(clearAllInputs())\r\n            if (response.message) yield put(setMessage(response.message))\r\n        } else {\r\n            if (response.fault) {\r\n                for (let i = 0; i < response.fault.length; i++) {\r\n                    yield put(setOnWarning(response.fault[i].param))\r\n                }\r\n            } else {\r\n                if (response.message) yield put(setMessage(response.message))\r\n            }\r\n        }\r\n    } catch (e) {\r\n        throw e\r\n    }\r\n}\r\n\r\nexport function* login(action) {\r\n    try {\r\n        const response = yield call(\r\n            request,\r\n            '/api/auth/login',\r\n            'POST',\r\n            action.body\r\n        )\r\n\r\n        if (response.ok) {\r\n            yield put(authentication(response.token, response.nickName))\r\n            yield put(clearAllInputs())\r\n        } else {\r\n            if (response.incorrectField === 'password')\r\n                yield put(clearPasswordInput())\r\n            else yield put(clearInput('nickName'))\r\n        }\r\n        yield put(setMessage(response.message))\r\n    } catch (e) {\r\n        throw e\r\n    }\r\n}\r\n","import { call, put, select } from 'redux-saga/effects'\r\nimport { request } from '../Api'\r\nimport {\r\n    setLoadingFalse,\r\n    setLoadingTrue,\r\n    updatePostList,\r\n    clearPostList,\r\n} from '../postsLogic/postsActionCreators'\r\n\r\nexport function* publishPost() {\r\n    try {\r\n        const posts = yield select(state => state.postsReducer)\r\n        const auth = yield select(state => state.authReducer)\r\n        const date = Date.now()\r\n        let body = {\r\n            text: posts.postField,\r\n            date: date,\r\n            avatarUrl: auth.avatarUrl,\r\n            author: auth.nickName,\r\n        }\r\n        const response = yield call(request, '/api/posts/create', 'POST', body)\r\n        if (response.ok) {\r\n            const nickName = yield select(state => state.authReducer.nickName)\r\n            body = { nickName, loadedPostsQuantity: 0 }\r\n            const update = yield call(\r\n                request,\r\n                '/api/posts/upload',\r\n                'POST',\r\n                body\r\n            )\r\n            yield put(clearPostList())\r\n            yield put(updatePostList(update))\r\n        } else {\r\n        }\r\n    } catch (error) {\r\n        // throw error\r\n    }\r\n}\r\n\r\nexport function* uploadPosts() {\r\n    yield put(setLoadingTrue())\r\n    try {\r\n        const posts = yield select(state => state.postsReducer)\r\n        const nickName = yield select(state => state.authReducer.nickName)\r\n        const body = {\r\n            nickName,\r\n            loadedPostsQuantity: posts.uploadedPosts.length,\r\n        }\r\n        const response = yield call(request, '/api/posts/upload', 'POST', body)\r\n        yield put(updatePostList(response))\r\n    } catch (error) {\r\n        console.log(error.name)\r\n        //    throw error\r\n    }\r\n    yield put(setLoadingFalse())\r\n}\r\n\r\nexport function* likeChanging(action) {\r\n    try {\r\n        const body = {\r\n            postId: action.postId,\r\n            newLikes: action.newLikes,\r\n        }\r\n        const response = yield call(request, '/api/posts/like', 'PATCH', body)\r\n        if (response.ok) {\r\n        }\r\n    } catch (error) {\r\n        // throw error\r\n    }\r\n}\r\n\r\nexport function* checkNewPosts() {\r\n    try {\r\n        const currentLatestPostId = yield select(\r\n            state => state.postsReducer.uploadedPosts[0]._id\r\n        )\r\n        const nickName = yield select(state => state.authReducer.nickName)\r\n        const response = yield call(request, '/api/posts/check-new-posts')\r\n        if (\r\n            currentLatestPostId &&\r\n            currentLatestPostId !== response.latestPostId\r\n        ) {\r\n            const body = { nickName, loadedPostsQuantity: 0 }\r\n            const update = yield call(\r\n                request,\r\n                '/api/posts/upload',\r\n                'POST',\r\n                body\r\n            )\r\n            yield put(clearPostList())\r\n            yield put(updatePostList(update))\r\n        }\r\n    } catch (error) {\r\n        // throw error\r\n    }\r\n}\r\n","import { call, put, select } from 'redux-saga/effects'\r\nimport * as profileTypes from '../profileLogic/profileTypes'\r\nimport { request } from '../Api'\r\nimport {\r\n    setAvatarUrl,\r\n    setMessage,\r\n} from '../authenticationLogic/authActionCreators'\r\nimport {\r\n    setLoadingFalse,\r\n    setLoadingTrue,\r\n    updatePostList,\r\n    clearPostList,\r\n} from '../postsLogic/postsActionCreators'\r\nimport { setCurrentProfileAvatarUrl } from '../profileLogic/profileActionCreators'\r\n\r\nexport function* sendAvatarImage(action) {\r\n    yield put(setLoadingTrue())\r\n    const fileInput = yield select(state => state.profileReducer.fileInputRef)\r\n    const nickName = yield select(state => state.authReducer.nickName)\r\n    try {\r\n        const response = yield call(\r\n            request,\r\n            '/api/profile/load-avatar',\r\n            'POST',\r\n            action.form,\r\n            {}\r\n        )\r\n        if (response.ok) {\r\n            yield put({\r\n                type: profileTypes.UPLOAD_CURRENT_PROFILE_AVATAR_URL,\r\n                nickName,\r\n            })\r\n            const body = {\r\n                loadedPostsQuantity: 0,\r\n            }\r\n            const update = yield call(\r\n                request,\r\n                '/api/posts/upload',\r\n                'POST',\r\n                body\r\n            )\r\n            yield put(clearPostList())\r\n            yield put(updatePostList(update))\r\n        } else {\r\n            yield put(setMessage(response.message))\r\n        }\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n    fileInput.value = null\r\n    yield put(setLoadingFalse())\r\n}\r\n\r\nexport function* uploadCurrentProfileAvatarUrl(action) {\r\n    try {\r\n        const body = {\r\n            nickName: action.nickName,\r\n        }\r\n        const response = yield call(\r\n            request,\r\n            '/api/profile/avatar-url',\r\n            'POST',\r\n            body\r\n        )\r\n        if (response.ok) {\r\n            const nickName = yield select(state => state.authReducer.nickName)\r\n            if (nickName === action.nickName)\r\n                yield put(setAvatarUrl(response.avatarUrl))\r\n            yield put(setCurrentProfileAvatarUrl(response.avatarUrl))\r\n        } else {\r\n        }\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n","import { takeLeading } from 'redux-saga/effects'\r\nimport * as authTypes from '../authenticationLogic/authTypes'\r\nimport * as postsTypes from '../postsLogic/postsTypes'\r\nimport * as profileTypes from '../profileLogic/profileTypes'\r\nimport { login, registration } from './authWorker'\r\nimport {\r\n    likeChanging,\r\n    publishPost,\r\n    uploadPosts,\r\n    checkNewPosts,\r\n} from './postsWorker'\r\nimport { sendAvatarImage, uploadCurrentProfileAvatarUrl } from './profileWorker'\r\n\r\n// Saga watcher\r\nexport default function* Saga() {\r\n    yield takeLeading(authTypes.REGISTRATION, registration)\r\n    yield takeLeading(authTypes.LOGIN, login)\r\n    yield takeLeading(postsTypes.PUBLISH_POST, publishPost)\r\n    yield takeLeading(postsTypes.UPLOAD_POSTS, uploadPosts)\r\n    yield takeLeading(profileTypes.SEND_AVATAR_IMAGE, sendAvatarImage)\r\n    yield takeLeading(\r\n        profileTypes.UPLOAD_CURRENT_PROFILE_AVATAR_URL,\r\n        uploadCurrentProfileAvatarUrl\r\n    )\r\n    yield takeLeading(postsTypes.LIKE_CHANGING, likeChanging)\r\n    yield takeLeading(postsTypes.CHECK_NEW_POSTS, checkNewPosts)\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport thunk from 'redux-thunk'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport App from './App'\r\nimport { rootReducer } from './redux/rootReducer'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport Saga from './redux/sagas/sagaWatcher'\r\n\r\nconst saga = createSagaMiddleware()\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    composeWithDevTools(applyMiddleware(thunk, saga))\r\n)\r\n\r\nsaga.run(Saga)\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n)\r\n\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}